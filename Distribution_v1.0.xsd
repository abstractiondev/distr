<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2011 rel. 2 sp1 (http://www.altova.com) by Kalle Launiala (Citrus Solutions Oy) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="DistributionAbstraction">
		<xs:annotation>
			<xs:documentation>Abstraction Distribution.

DRAFT</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="Catalogue">
					<xs:annotation>
						<xs:documentation>Abstraction catalogue.

The root catalogues can and will link also to subcatalogues.

Not all catalogues need to be accessed through the root clients, it is enough that the end-user client can access the catalogues.

Any write-accessible client can update these private catalogues in their respective private repositories.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Location" type="LocationType" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Catalogue access locations - Git repositories with different protocol URIs possible.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="Abstractions">
								<xs:annotation>
									<xs:documentation>Open accessible abstractions.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Abstraction" maxOccurs="unbounded">
											<xs:annotation>
												<xs:documentation>TBD later: 

Abstraction can state that it is aware of certain catalogue by publishing separate CatalogueList.xml within it's root folder.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:sequence>
													<xs:element name="Location" type="LocationType" maxOccurs="unbounded">
														<xs:annotation>
															<xs:documentation>Abstraction access locations - Git repositories with different protocol URIs possible.</xs:documentation>
														</xs:annotation>
													</xs:element>
													<xs:element name="Metadata">
														<xs:complexType>
															<xs:sequence>
																<xs:element name="Categories" minOccurs="0">
																	<xs:annotation>
																		<xs:documentation>Abstraction categories.

To help in searches.</xs:documentation>
																	</xs:annotation>
																	<xs:complexType>
																		<xs:sequence>
																			<xs:element name="Category" maxOccurs="unbounded">
																				<xs:complexType>
																					<xs:attribute name="name" use="required"/>
																				</xs:complexType>
																			</xs:element>
																		</xs:sequence>
																	</xs:complexType>
																</xs:element>
																<xs:element name="Custom" minOccurs="0">
																	<xs:complexType>
																		<xs:sequence>
																			<xs:element name="CustomMetadata" maxOccurs="unbounded">
																				<xs:complexType>
																					<xs:sequence>
																						<xs:element name="Value" type="xs:string"/>
																					</xs:sequence>
																					<xs:attribute name="name" type="xs:string" use="required"/>
																				</xs:complexType>
																			</xs:element>
																		</xs:sequence>
																	</xs:complexType>
																</xs:element>
															</xs:sequence>
														</xs:complexType>
													</xs:element>
													<xs:element name="DescriptionAndSamples" minOccurs="0">
														<xs:annotation>
															<xs:documentation>TODO: Design proper structure to include description, documentation and samples linking.</xs:documentation>
														</xs:annotation>
													</xs:element>
													<xs:element name="ArchitecturalLayers">
														<xs:complexType>
															<xs:sequence>
																<xs:element name="Layer" maxOccurs="unbounded">
																	<xs:complexType>
																		<xs:sequence>
																			<xs:element name="Platforms" minOccurs="0">
																				<xs:annotation>
																					<xs:documentation>Supported target platforms. 

Currently free form, later on more controlled so that automatic categorizing and filtering can be applied properly.</xs:documentation>
																				</xs:annotation>
																				<xs:complexType>
																					<xs:choice maxOccurs="unbounded">
																						<xs:element name="IdentifiedPlatform">
																							<xs:complexType>
																								<xs:attribute name="name" use="required">
																									<xs:simpleType>
																										<xs:restriction base="xs:string">
																											<xs:enumeration value="Windows"/>
																											<xs:enumeration value="Linux"/>
																											<xs:enumeration value="MacOSX"/>
																											<xs:enumeration value="WP7"/>
																											<xs:enumeration value="Android"/>
																											<xs:enumeration value="MeeGo"/>
																											<xs:enumeration value="iOS"/>
																										</xs:restriction>
																									</xs:simpleType>
																								</xs:attribute>
																							</xs:complexType>
																						</xs:element>
																						<xs:element name="UnidentifiedPlatform">
																							<xs:complexType>
																								<xs:attribute name="name" type="xs:string" use="required"/>
																							</xs:complexType>
																						</xs:element>
																					</xs:choice>
																				</xs:complexType>
																			</xs:element>
																		</xs:sequence>
																		<xs:attribute name="name"/>
																		<xs:attribute name="role" use="required">
																			<xs:simpleType>
																				<xs:restriction base="xs:string">
																					<xs:enumeration value="BusinessLogic"/>
																					<xs:enumeration value="ClientProxyLayer"/>
																					<xs:enumeration value="ServerServiceLayer"/>
																					<xs:enumeration value="DataAccess"/>
																					<xs:enumeration value="Other"/>
																					<xs:enumeration value="ClientUI"/>
																				</xs:restriction>
																			</xs:simpleType>
																		</xs:attribute>
																	</xs:complexType>
																</xs:element>
															</xs:sequence>
														</xs:complexType>
													</xs:element>
												</xs:sequence>
												<xs:attribute name="name" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="name" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Subcatalogue">
					<xs:annotation>
						<xs:documentation>Implemented as git submodule.

Every subcatalogue is supposed to be within its own file. This is because subcatalogues can be added then simply adding new file to the forked distribution repository.

Validation is made to ensure that the subcatalogue file name is exact match of the primary location of the subcatalogue git repository.

This is done before the merge is accepted.

TBD: Should the subcatalogue itself authorize its usage within otehr catalogues? Should it contain CatalogueList.xml as Abstractions may?</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Location" type="LocationType" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Catalogue access locations - Git repositories with different protocol URIs possible.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="name" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="LocationType">
		<xs:attribute name="uri" type="xs:anyURI" use="required"/>
	</xs:complexType>
</xs:schema>
